// /* 

// This file is part of MedCare, a healthcare management application.
// below are all the files and folders having same classes name for working  with the app 
// !  Lib:||===>Features-----> *||===>>SplashScreen==>|---spalsh_screen.dart(file)
// ?   ||       ||===>>Auth
//     ||              *|--AuthDataBase(get_user_data.dart+user_data.dart)
//     ||              *|--AuthDataBase(get_user_data.dart+user_data.dart)
//     ||              *|--Screens--->AuthScreens(confirmation_password_screen.dart
//     ||               |     *+login_screen.dart+sign_up_screen.dart+onboarding_screen.dart+forget_password_screen.dart
//     ||               |    *+choose_new_password_screen.dart)
//     ||              *|---forget_password_auth.dart(file)+login_auth.dart(file)+logout_auth.dart(file)+SignUp.dart(file)
//   ? ||    * ||===>>Home 
//     ||              *|--screen(all_arrival_screen.dart+home_screen.dart)
//     ||              *|--provider(search_provider.dart+home_provider.dart)               
// ?   ||    * ||===>>AI_ChatBot(contain no folders all are files) 
//     ||               *|--ai_repo.dart)
//     ||               *|--ai_client.dart)
//     ||               *|--chat_controller.dart)
//     ||               *|--chat_message.dart)
//     ||               *|--chat_repository_model.dart)
//     ||               *|--chat_view.dart)   
//     ||               *|--custom_exception.dart)   
//     ||               *|--global_class.dart)   
//  ?  ||    * ||===>>ProductDetail
//                     *|--screen(product_detaial_screen.dart)
//                     *|--provider(product_detail_provider.dart)
//  ?  ||    * ||===>>Cart
//                     *|--screen(cart_screen.dart)
//                     *|--provider(cat_add_productprovider.dart+cartProduct_countProvider.dart+cart_itemDeleteProvider.dart)
//  ?  ||    * ||===>>WishList
//                     *|--screen(favourite_list_screen.dart)
//                     *|--provider(wishList_provider.dart)
//  ?  ||    * ||===>>Reviews
//                      *|--database(review.dart)
//                      *|--screen(add_review_screen.dart+reviews_screen.dart)
//                      *|--provider(review_provider.dart+size_selectorProvider.dart+star_sliderProvider.dart)
//     ||    * ||===>>Address
//                     *|--database(review.dart)
//                     *|--screen(address_screen.dart)
//                     *|--provider(address_provider.dart)
//     ||    * ||===>>Card  
//                     *|--screen(payment_screen.dart+newCard_screen.dart)
//                     *|--provider(card_form_provider.dart+card_submitButton_provider.dart+card_typeProvider.dart)
//     ||    * ||===>>ConfirmationScreen ==>  *|-->(confirmation_Animation.dart+confir_order.dart).
// !   ||====>Firebase-->contain all files no foler(addCard.drat+address.dart+userCart.dart+userWishlist.dart)      
// !   ||====>Models--->containso only files(cardType_model.drt+cartItem_model.dart+newArrival_model.dart+size_selecor_model.dart_wishList_model.dart) 
// !   ||====>Providers-->only files(bottom_buttonProvider.dart+textfield_provider.dart+themProvider.dart+time_provider.dart) 
// !   ||====>Resources (colors.dart+mediaqery.dart+notification_dart(e.g.toastmessages)+Navigatorbar.dart+navigation.dart+paths.dart+widgets.dart)
// !   ||====>firebase_options.dart(file)  
// !   ||====>main.dart(file) 






// ! App Flow :
// !App flowworking : (SplashScreen --> OnBoardingScreen(doctor pic expand flex3+ text(intro) +buton  get started)---->LoginScreen().
// ! -->LoginScreen-->SignUpScreen -->HomeScreen().
// ! HomeScreen(right side icon for profiledrawer(image email, appname + user , name, logout feature + icons for  navigation in differant screens ))------->ViewAllScreen(all arrival products) 
// *  |===>>ProductDetailScreen(product image + name + price + type + size +  + description + reviews)
//    |===>Ai CatScreen                   
// !  |==>>CartScreen(porduct QYT (+, - + delete + address section show address + card show saved last time + proceed buton(move to confirmation screen)-->AddressScreen(adding address)                                  
// ?  |    |=>PaymentScreen(carddetail+cardtype+cardnumber+cardholdername+expirydate+cvv+savecard+Addcardbutton)-->cardScreen(ADDnewcardscreen+cardtype+cardnumber+cardholdername+expirydate+cvv+save card) 
// ?  |    |===>ConfirmationScreen(confirmation animation + confirm order button)  
// !  |===>WishListScreen --> ProductDetailScreen --> ReviewsScreen  


//  */
// /* FIREBASE STRUCTURE IN MY APP BACKEND : kikhikhikikhikhi :   */
// /*
// !    FireStore: 
//       !   ||====>>Collection--->('User')---->doc(uid autogenerated)
//                                             !|-->Fields:
//                                               * |==> * Email ,id, name, profileImage(Url)+ AddressDetail[ map
//                                                                                                              {
//                                                                                                              0:
//                                                                                                               address: ""
//                                                                                                               city: "",
//                                                                                                               country: "",
//                                                                                                               name: "",
//                                                                                                               phoneNo: "",}
//                                                                                                               ]
//       !   ||====>>Collection--> ('WishList')---->doc(uid autogenerated)
//                                             !|-->Collection--> ('WishListItems')---->doc(productId(date time))
//                                                                                             !|-->Fields:
//                                                 * |==> * productId: "datetime', productName: '', productImagePath:['',''], productPrice:'',
//                                                *  productType: '',Size: ['',''],
//                                                 * Status : true/false,
//                                                 *productBrand: '',
//                                                 *productDescription: '',
//                                                 *productReviews: [{   0:                                                                                                                                                                                      
//                                                     * Userimage :'',name:'',rating : '',time:'', review: '',
//                                                 *   }]
// !         ||====>>Collection--> ('Cart')---->doc(uid autogenerated)
//                                             !|-->Collection--> ('cartItems')---->doc(productId(date time))
//                                                                                             !|-->Fields:
//                                                 * |==> * productId: "datetime', Name: '', Image:'', Price:'',
//                                                *  Type: '',
//                                                 *QTY: '',
                                                                           
//       !   ||=====>>Collection--> ('MedCareProducts')---->doc(productId(date time))
//                                                                  !|-->Fields:
//                                                 * |==> * productId: "datetime', name: '', productImagePath:['',''],
//                                                 * price:'',
//                                                *  Type: '',Size: ['','',],
//                                                * createdAt: 'datetime',

//                                                 *brand: '',
//                                                 *description: '',
                                                  
//                                                 *productReviews: [{   0: 
//                                                 userImage :'',                                                                                                                                                                                     
//                                                   name:'',rating : '',time:'', review: '',
//                                                 *   }]
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||
//       !   ||


//       System Architecture:

// What is your overall system architecture? (Client-Server, Microservices, etc.)    flutter code integerate with firebase 

// How does your Flutter app communicate with Firebase? (REST APIs, Firebase SDK?) flutter sdk and firebase sdk with firebase firestire auth  packages 

// Where are your AI models hosted? (Cloud, local processing, hybrid?)  gemini  flash 2.5 haighly trained like original model strong commanding 

// Database Design:


// Do you use any local storage (SharedPreferences) for what specific data?  ans -- > bool type storage  in login and sign up page for remember me text and toggle button  

// What specific data do you store in Firebase Firestore? (user profiles, products, orders, chat history?)  :ans |
// What are your main database collections/tables and their relationships?

// DATABASE STRUCTURE IN MY APP BACKEND : 
// Ans-->  !    FireStore: 
//       !   ||====>>Collection--->('User')---->doc(uid autogenerated)
//                                             !|-->Fields:
//                                               * |==> * Email ,id, name, profileImage(Url)+ AddressDetail[ map
//                                                                                                              {
//                                                                                                              0:
//                                                                                                               address: ""
//                                                                                                               city: "",
//                                                                                                               country: "",
//                                                                                                               name: "",
//                                                                                                               phoneNo: "",}
//                                                                                                               ]
//       !   ||====>>Collection--> ('WishList')---->doc(uid autogenerated)
//                                             !|-->Collection--> ('WishListItems')---->doc(productId(date time))
//                                                                                             !|-->Fields:
//                                                 * |==> * productId: "datetime', productName: '', productImagePath:['',''], productPrice:'',
//                                                *  productType: '',Size: ['',''],
//                                                 * Status : true/false,
//                                                 *productBrand: '',
//                                                 *productDescription: '',
//                                                 *productReviews: [{   0:                                                                                                                                                                                      
//                                                     * Userimage :'',name:'',rating : '',time:'', review: '',
//                                                 *   }]
// !         ||====>>Collection--> ('Cart')---->doc(uid autogenerated)
//                                             !|-->Collection--> ('cartItems')---->doc(productId(date time))
//                                                                                             !|-->Fields:
//                                                 * |==> * productId: "datetime', Name: '', Image:'', Price:'',
//                                                *  Type: '',
//                                                 *QTY: '',
                                                                           
//       !   ||=====>>Collection--> ('MedCareProducts')---->doc(productId(date time))
//                                                                  !|-->Fields:
//                                                 * |==> * productId: "datetime', name: '', productImagePath:['',''],
//                                                 * price:'',
//                                                *  Type: '',Size: ['','',],
//                                                * createdAt: 'datetime',

//                                                 *brand: '',
//                                                 *description: '',
                                                  
//                                                 *productReviews: [{   0: 
//                                                 userImage :'',                                                                                                                                                                                     
//                                                   name:'',rating : '',time:'', review: '',
//                                                 *   }]
        

//         */
  













 


// I'm a student of BSCS in the University, I have to submit my FYP named "Pharmacy Managment System powered by AI". I have to make documentation on my fyp. Our supervisor provided the sample template for documentation, it has 7 chapters. Can you help me make documentation for those chapters. You have to make documentation exactly the same according to the topics that are included in the chapters, I will give you the chapters 1 by 1, please make documentation on the given topics in chapters (using same headings & subheadings)
// VIp Note : You don't have to put any wrong data or information in my documentation, if you don't have information and knowledge about anything or have any confusion about what should be added in this section, feel free to ask me questions regarding any thing related to my FYP so that you may include correct and accurate information in documentation chapterwise according to my project.

// Chapter 1: Introduction:
//  * Background *
//  Problem Statement
//  • Objectives 
// * Scope of the Project* 
// * *Methodology/Approach
//  • Report Organization.

// Before you start anything I want to share with you general details and features regarding my project. Ask me questions about my FYP for getting general information, also ask me core questions for getting information regarding chapter provided that are your requirement to proceed with documentation successfully.

// . AI Features/Components: * Intelligent Drug Interaction Checker: AI-powered analysis to detect potential medication conflicts * Inventory Prediction System: Machine learning algorithms for demand forecasting and automated reordering * Prescription Analysis: Natural language processing for prescription validation and error detection * Personalized Recommendation Engine: AI-driven suggestions for alternative medications and dosage optimization . give the side effect usage and benefit of medicines , teels about disease to model it will respond you only medical information give not any other responce e.g if type what laptop it will give responce i'm only guided for medical informations

// echnologies/Programming Languages: * Frontend: Dart , framework(Flutter 3.32.5)+ MVVM+provider + setstate * Backend: firebase integeration (storage+authentication + firebasefirestore) * Database: local storage sharedprefrance * AI/ML Frameworks: TensorFlow, Scikit-learn, PyTorch for machine learning models + flash2.5 gemini * APIs: RESTful services for system integration

// Target Users: buy medicine + see description + chatbot for consultant + payment with card , order the medicine + address adding + fav prodcuts + Chapter 1 Specific Responses: Background Challenges: Traditional pharmacy management faces issues like manual inventory tracking leading to stock-outs, human errors in prescription processing, lack of integrated systems causing data silos, and difficulty in regulatory compliance monitoring. AI Solutions: AI addresses these through predictive analytics for inventory, automated validation systems, integrated data processing, and intelligent compliance monitoring. Problem Statement: Solving inefficiencies in manual processes, reducing medication errors, improving inventory optimization, and enhancing customer service through data-driven insights. Main Objectives:
// Develop an integrated pharmacy management platform * Implement AI-driven decision support systems * Improve operational efficiency by 40-60% * Enhance patient safety through intelligent validation * Create scalable and user-friendly interface Scope & Features: Included: Core pharmacy operations, AI modules ---> reporting systems, user management Limitations: , Methodology: Following Agile development methodology with iterative sprints, incorporating user feedback, and continuous testing of AI models. my trained Ai responce command -- >>> ''' You are MediCare AI Assistant – a professional medical & pharmaceutical support system. Always respond ONLY to medical, pharmaceutical, psychology, physiotherapy, nutrition, and healthcare-related queries. If the user asks anything non-medical, politely reply: "I can only assist with medical or pharmaceutical queries. Please ask about medicines, diseases, dosages, tests, or side effects." Rules for responses: 1. If user just enters the chat → Greet: "Welcome to MediCare Pharma System. I'm the AI-trained model of this system. How can I help you regarding medicines or diseases?" 2. If user tells about a disease/problem → First ask: - "Have you visited a doctor for this? If yes, please share doctor’s advice, lab test reports, ultrasound, or X-ray results so I can guide you better." 3. If user only shares symptoms (without reports) → - Ask user’s age, gender, and relevant details. - Suggest possible medicines/treatments in 2–3 lines. - Always recommend: "Please consult a qualified doctor for proper treatment." 4. Answer Style: - Keep responses short (2–3 lines). - After answering, ask: "Would you like more detailed information?" - If user says yes → Give a detailed but concise explanation (not too long). 5. Roles: Respond as a pharmacist, doctor, therapist, physiotherapist, or nutritionist depending on context. 6. Always remain professional, medically accurate, and focused on healthcare. - No jokes, no unrelated info. - Prioritize patient safety and advise professional consultation for serious cases. '''
// Is this primarily for customers/patients (mobile app for buying medicines, AI consultation, delivery) Project Summary: * Mobile app is for customers * Online medicine purchase with add to cart, payment, ordering * AI chatbot for medical consultation (MediCare AI Assistant) * Medicine recommendations * Flutter app with Firebase backend
// * no Admin panel ✓
// * Delivery yes ✓
// * Doctor appointments no
// * Physical store integration no
// * Inventory management no Chapter 2: Literature Review
// * Existing Systems
// * Comparative Analysis
// * Gaps Identified
// * Research Contributions
// Chapter 3: System Analysis
// * Requirements Gathering
// * Functional Requirements
// * Non-Functional Requirements
// * Feasibility Study (Technical, Economic, Operational)
// * Use Case Diagrams / DFDs
// Chapter 4: System Design
// * Architecture Diagram
// * ER Diagram (if applicable)
// * Database Design
// * Interface Design
// * Class Diagrams (for OOP-based systems)
// * Tools & Technologies
// Chapter 5: Implementation
// * Frontend
// * Backend
// * Database Integration
// * Screenshots of the Working System
// * APIs/Modules Used
// Chapter 6: Testing & Evaluation
// * Testing Strategy (Unit, Integration, System)
// * Test Cases
// * Results & Observations
// * Performance Evaluation
// * User Feedback (if any)
// Chapter 7: Conclusion & Future Work
// * Summary of Achievements
// * Limitations
// * Proposed Enhancements References Format according to IEEE referencing style: [1] A. Author, “Title of paper,” Journal Name, vol. xx, no. xx, pp. xx–xx, Year. [2] B. Author, Book Title, xth ed., City: Publisher, Year.
// Appendices
// * Source Code (optional or GitHub link)
// * Installation Guide
// * Additional Screenshots
// * Survey Forms (if any)
// IEEE Formatting Guidelines
// * Font: Times New Roman, Size 10 or 11
// * Line Spacing: Single
// * Margins: 1" on all sides
// * Justification: Fully justified
// * Headings: Bold, numbered (e.g., 1, 1.1, 2.3)
// * Agile methodology mein)
//    * Phase 1: Planning
//    * Phase 2: Design
//    * Phase 3: Development
// chapter one completed know it is a time chapter 2 -- create